"""Simulate an EnergyPlus flat shoebox model with associated artifacts."""

import asyncio
import logging

from hatchet_sdk.v0 import Context

from epengine.hatchet import hatchet
from epengine.models.flat_shoebox import FlatShoeboxSimulationSpec
from epengine.models.mixins import WithHContext
from epengine.utils.results import serialize_df_dict

logger = logging.getLogger(__name__)


class FlatShoeboxSimulationSpecWithContext(WithHContext, FlatShoeboxSimulationSpec):
    """A simulation specification with a Hatchet Context."""

    pass


# TODO: This could be generated by a class method in the SimulationSpec class
# but should it?
@hatchet.workflow(
    name="simulate_flat_shoebox",
    timeout="10m",
    version="0.3",
    schedule_timeout="1000m",
)
class SimulateFlatShoebox:
    """A workflow to simulate an EnergyPlus model."""

    @hatchet.step(name="simulate", timeout="10m", retries=2)
    async def simulate(self, context: Context):
        """Simulate an EnergyPlus Shoebox UBEM model.

        Args:
            context (Context): The context of the workflow

        Returns:
            dict: A dictionary of dataframes with results.
        """

        def run():
            data = context.workflow_input()
            spec = FlatShoeboxSimulationSpecWithContext(**data, hcontext=context)
            results = spec.run(log_fn=context.log)

            results = {"results": results}
            return serialize_df_dict(results)

        return await asyncio.to_thread(run)
