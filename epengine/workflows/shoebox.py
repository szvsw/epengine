"""Simulate an EnergyPlus ubem shoebox model with associated artifacts."""

import logging

from hatchet_sdk.v0 import Context

from epengine.hatchet import hatchet
from epengine.models.mixins import WithHContext
from epengine.models.shoebox import ShoeboxSimulationSpec
from epengine.utils.results import serialize_df_dict

logger = logging.getLogger(__name__)


class ShoeboxSimulationSpecWithContext(WithHContext, ShoeboxSimulationSpec):
    """A simulation specification with a Hatchet Context."""

    pass


# TODO: This could be generated by a class method in the SimulationSpec class
# but should it?
@hatchet.workflow(
    name="simulate_ubem_shoebox",
    timeout="10m",
    version="0.3",
    schedule_timeout="1000m",
)
class SimulateShoebox:
    """A workflow to simulate an EnergyPlus model."""

    @hatchet.step(name="simulate", timeout="10m", retries=2)
    def simulate(self, context: Context):
        """Simulate an EnergyPlus Shoebox UBEM model.

        Args:
            context (Context): The context of the workflow

        Returns:
            dict: A dictionary of dataframes with results.
        """
        data = context.workflow_input()
        spec = ShoeboxSimulationSpecWithContext(**data, hcontext=context)
        # _idf, results, err_text = await spec.run()
        _idf, results, err_text = spec.run()
        context.log(err_text)
        dfs = {"results": results}

        dfs = serialize_df_dict(dfs)

        return dfs


if __name__ == "__main__":
    from hatchet_sdk.v0 import new_client
    from pydantic import AnyUrl

    spec = ShoeboxSimulationSpec(
        experiment_id="test",
        sort_index=0,
        lib_uri=AnyUrl(
            "s3://ml-for-bem/tiles/massachusetts/2024_09_30/everett_lib.json"
        ),
        retrofit="Baseline",
        retrofit_lib_uri=AnyUrl(
            "s3://ml-for-bem/tiles/massachusetts/2024_09_30/everett_retrofits.yaml"
        ),
        typology="Residential",
        year_built=1972,
        num_floors=2,
        neighbor_polys=["POLYGON ((-10 0, -10 10, -5 10, -5 0, -10 0))"],
        neighbor_floors=[3],
        rotated_rectangle="POLYGON ((5 0, 5 10, 15 10, 15 0, 5 0))",
        long_edge=10,
        short_edge=10,
        long_edge_angle=0.23,
        footprint_area=100,
        epwzip_path="https://climate.onebuilding.org/WMO_Region_4_North_and_Central_America/USA_United_States_of_America/MA_Massachusetts/USA_MA_Boston-Logan.Intl.AP.725090_TMYx.2009-2023.zip",
    )
    spec_2 = spec.model_copy(deep=True)

    client = new_client()
    for _i in range(10):
        client.admin.run_workflow("simulate_ubem_shoebox", spec.model_dump(mode="json"))
