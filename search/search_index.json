{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EPEngine Hatchet","text":"<p>This is a repository for managing queues of EnergyPlus simulations with Hatchet.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The following pages will walk you through setting up a distributed EnergyPlus simulation engine.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<ul> <li>Docker</li> <li>poetry</li> </ul> <pre><code>make install\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<pre><code>cp .env.example .env\ncp .env.example .env.dev\n</code></pre> <p>You will then want to enter your AWS credentials into <code>.env</code> and your Hatchet credentials into both.</p>"},{"location":"getting-started/#running-the-system","title":"Running the System","text":""},{"location":"getting-started/#local","title":"Local","text":"<pre><code>make dev\n</code></pre> <pre><code>make prod\n</code></pre>"},{"location":"getting-started/#cloud","title":"Cloud","text":""},{"location":"modules/","title":"Modules Reference","text":""},{"location":"modules/#configs","title":"Configs","text":""},{"location":"modules/#epengine.models.configs.BaseSpec","title":"<code>BaseSpec</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A base spec for running a simulation.</p> <p>The main features are utilities to fetch files from uris and generate a locally scoped path for the files. according to the experiment_id.</p>"},{"location":"modules/#epengine.models.configs.BaseSpec.fetch_uri","title":"<code>fetch_uri(uri, use_cache=True)</code>","text":"<p>Fetch a file from a uri and return the local path.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>AnyUrl</code> <p>The uri to fetch</p> required <code>use_cache</code> <code>bool</code> <p>Whether to use the cache</p> <code>True</code> <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the fetched file</p>"},{"location":"modules/#epengine.models.configs.BaseSpec.from_payload","title":"<code>from_payload(payload)</code>  <code>classmethod</code>","text":"<p>Create a simulation spec from a payload.</p> <p>Fetches a spec from a payload and return the spec, or validates it if it is already a spec dict.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict</code> <p>The payload to fetch</p> required <p>Returns:</p> Name Type Description <code>spec</code> <code>BaseSpec</code> <p>The fetched spec</p>"},{"location":"modules/#epengine.models.configs.BaseSpec.from_uri","title":"<code>from_uri(uri)</code>  <code>classmethod</code>","text":"<p>Fetch a spec from a uri and return the spec.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>AnyUrl</code> <p>The uri to fetch</p> required <p>Returns:</p> Name Type Description <code>spec</code> <code>BaseSpec</code> <p>The fetched spec</p>"},{"location":"modules/#epengine.models.configs.BaseSpec.local_path","title":"<code>local_path(pth)</code>","text":"<p>Return the local path of a uri scoped to the experiment_id.</p> <p>Note that this should only be used for non-ephemeral files.</p> <p>Parameters:</p> Name Type Description Default <code>pth</code> <code>AnyUrl</code> <p>The uri to convert to a local path</p> required <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the uri</p>"},{"location":"modules/#epengine.models.configs.BaseSpec.log","title":"<code>log(msg)</code>","text":"<p>Log a message to the context or to the logger.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to log</p> required"},{"location":"modules/#epengine.models.configs.RecursionMap","title":"<code>RecursionMap</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A map of recursion specs to use in recursive calls.</p> <p>This allows a recursion node to understand where it is in the recursion tree and how to behave.</p>"},{"location":"modules/#epengine.models.configs.RecursionMap.validate_path_is_length_ge_1","title":"<code>validate_path_is_length_ge_1(values)</code>  <code>classmethod</code>","text":"<p>Validate that the path is at least length 1.</p>"},{"location":"modules/#epengine.models.configs.RecursionSpec","title":"<code>RecursionSpec</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A spec for recursive calls.</p>"},{"location":"modules/#epengine.models.configs.RecursionSpec.validate_offset_less_than_factor","title":"<code>validate_offset_less_than_factor(values)</code>  <code>classmethod</code>","text":"<p>Validate that the offset is less than the factor.</p>"},{"location":"modules/#epengine.models.configs.SimulationSpec","title":"<code>SimulationSpec</code>","text":"<p>               Bases: <code>BaseSpec</code></p> <p>A spec for running an EnergyPlus simulation.</p>"},{"location":"modules/#epengine.models.configs.SimulationSpec.ddy_path","title":"<code>ddy_path</code>  <code>cached</code> <code>property</code>","text":"<p>Fetch the ddy file and return the local path.</p> <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the ddy file</p>"},{"location":"modules/#epengine.models.configs.SimulationSpec.epw_path","title":"<code>epw_path</code>  <code>cached</code> <code>property</code>","text":"<p>Fetch the epw file and return the local path.</p> <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the epw file</p>"},{"location":"modules/#epengine.models.configs.SimulationSpec.idf_path","title":"<code>idf_path</code>  <code>cached</code> <code>property</code>","text":"<p>Fetch the idf file and return the local path.</p> <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the idf file</p>"},{"location":"modules/#epengine.models.configs.SimulationsSpec","title":"<code>SimulationsSpec</code>","text":"<p>               Bases: <code>BaseSpec</code></p> <p>A spec for running multiple simulations.</p> <p>One key feature is that children simulations inherit the experiment_id of the parent simulations BaseSpec since they are both part of the same experiment.</p>"},{"location":"modules/#epengine.models.configs.SimulationsSpec.set_children_experiment_id","title":"<code>set_children_experiment_id(values)</code>  <code>classmethod</code>","text":"<p>Set the experiment_id of each child spec to the experiment_id of the parent.</p>"},{"location":"modules/#epengine.models.configs.URIResponse","title":"<code>URIResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A response containing the uri of a file</p>"},{"location":"modules/#epengine.models.configs.WithBucket","title":"<code>WithBucket</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model with a bucket to store results.</p>"},{"location":"modules/#epengine.models.configs.WithHContext","title":"<code>WithHContext</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model with a Hatchet context.</p>"},{"location":"modules/#epengine.models.configs.WithHContext.log","title":"<code>log(msg)</code>","text":"<p>Log a message to the hatchet context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to log</p> required"},{"location":"modules/#epengine.models.configs.WithOptionalBucket","title":"<code>WithOptionalBucket</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A model with an optional bucket to store results.</p>"},{"location":"modules/#epengine.models.configs.fetch_uri","title":"<code>fetch_uri(uri, local_path, use_cache=True, logger_fn=logger.info)</code>","text":"<p>Fetch a file from a uri and return the local path.</p> <p>Caching is enabled by default and works by checking if the file exists locally before downloading it to avoid downloading the same file multiple times.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>AnyUrl</code> <p>The uri to fetch</p> required <code>local_path</code> <code>Path</code> <p>The local path to save the fetched file</p> required <code>use_cache</code> <code>bool</code> <p>Whether to use the cache</p> <code>True</code> <code>logger_fn</code> <code>Callable</code> <p>The logger function to use</p> <code>info</code> <p>Returns:</p> Name Type Description <code>local_path</code> <code>Path</code> <p>The local path of the fetched file</p>"},{"location":"modules/#ddy-injector","title":"DDY Injector","text":"<p>A module to inject DDY files into IDF files.</p>"},{"location":"modules/#epengine.models.ddy_injector.DDYField","title":"<code>DDYField</code>","text":"<p>               Bases: <code>Enum</code></p> <p>An enumeration of the fields in a DDY file that can be injected into an IDF file.</p>"},{"location":"modules/#epengine.models.ddy_injector.DDYFieldNotFoundError","title":"<code>DDYFieldNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a field is not found in a DDY file.</p>"},{"location":"modules/#epengine.models.ddy_injector.DDYFieldNotFoundError.__init__","title":"<code>__init__(field, obj)</code>","text":"<p>Initialize the error.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>DDYField</code> <p>The field that was not found.</p> required <code>obj</code> <code>str</code> <p>The object that was not found.</p> required"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec","title":"<code>DDYSizingSpec</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to define how to inject a DDY file into an IDF file.</p>"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec.handle_design_days","title":"<code>handle_design_days(idf, ddy)</code>","text":"<p>Handles the SIZINGPERIOD:DESIGNDAY field in the DDY file.</p> <p>Parameters:</p> Name Type Description Default <code>idf</code> <code>IDF</code> <p>The IDF file to inject the DDY file into.</p> required <code>ddy</code> <code>IDF</code> <p>The DDY file to inject into the IDF file.</p> required"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec.handle_site_location","title":"<code>handle_site_location(idf, ddy)</code>","text":"<p>Handles the SITE:LOCATION field in the DDY file.</p> <p>Parameters:</p> Name Type Description Default <code>idf</code> <code>IDF</code> <p>The IDF file to inject the DDY file into.</p> required <code>ddy</code> <code>IDF</code> <p>The DDY file to inject into the IDF file.</p> required"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec.handle_weather_file_condition_types","title":"<code>handle_weather_file_condition_types(idf, ddy)</code>","text":"<p>Handles the SIZINGPERIOD:WEATHERFILECONDITIONTYPE field in the DDY file.</p> <p>Parameters:</p> Name Type Description Default <code>idf</code> <code>IDF</code> <p>The IDF file to inject the DDY file into.</p> required <code>ddy</code> <code>IDF</code> <p>The DDY file to inject into the IDF.</p> required"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec.inject_ddy","title":"<code>inject_ddy(idf, ddy)</code>","text":"<p>Copies the DDY file into the IDF file according to the spec.</p> <p>Currently, only the following DDY fields are supported: - SITE:LOCATION - SIZINGPERIOD:DESIGNDAY - SIZINGPERIOD:WEATHERFILECONDITIONTYPE</p> <p>The following DDY fields are ignored as the just contain rain information or are not used: - RUNPERIODCONTROL:DAYLIGHTSAVINGTIME - SITE:PRECIPITATION - ROOFIRRIGATION - SCHEDULE:FILE</p> <p>Parameters:</p> Name Type Description Default <code>idf</code> <code>IDF</code> <p>The IDF file to inject the DDY file into.</p> required <code>ddy</code> <code>IDF</code> <p>The DDY file to inject into the IDF file.</p> required"},{"location":"modules/#epengine.models.ddy_injector.DDYSizingSpec.remove_and_replace","title":"<code>remove_and_replace(idf, ddy, field, copy_names)</code>","text":"<p>Removes all objects of the given field and replaces them with the new ones.</p> <p>Raises an error if the object is not found in the DDY file and <code>self.raise_on_not_found</code> is True.</p> <p>Parameters:</p> Name Type Description Default <code>idf</code> <code>IDF</code> <p>The IDF file to remove and replace objects from.</p> required <code>ddy</code> <code>IDF</code> <p>The DDY file to copy objects from.</p> required <code>field</code> <code>DDYField</code> <p>The field to remove and replace objects from.</p> required <code>copy_names</code> <code>set[WeatherFileConditionType] | set[DesignDayName]</code> <p>The names of the objects to copy.</p> required"},{"location":"modules/#results","title":"Results","text":""}]}