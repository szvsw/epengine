Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The name of the environment being deployed.
  Port:
    Type: Number
    Default: 5671
    Description: Broker Port Number
  ApiPort:
    Type: Number
    Default: 15671
    Description: API Broker Port Number
  PrivateSubnets:
    Type: String
    Description: The IDs of the private subnets in which to create the Aurora Serverless v2 cluster.
    Default: ""
  VPCID:
    Type: String
    Description: The ID of the VPC in which to create the Aurora Serverless v2 cluster.
    Default: ""

Mappings:
  BrokerHostInstanceTypeMap:
    test:
      "HostInstanceType": mq.t3.micro 
    dev:
      "HostInstanceType": mq.t3.micro 
    prod:
      "HostInstanceType": mq.t3.micro

Resources:
  # Security group for the RabbitMQ broker.
  # This is the target for ingress from other services in the environment.
  hatchetbrokerTargetSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for the RabbitMQ broker'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'The Security Group for the RabbitMQ broker.'
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-AmazonMQ'

  # Enable ingress from other ECS services created within the environment.
  hatchetbrokerWorkloadSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for one or more workloads to access the RabbitMQ broker'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'The Security Group to access the RabbitMQ broker.'
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-AmazonMQ'

  BrokerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from one or more workloads in the environment.
      GroupId: !Ref hatchetbrokerTargetSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref Port
      ToPort: !Ref Port
      SourceSecurityGroupId: !Ref hatchetbrokerWorkloadSecurityGroup
  
  BrokerAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: API Ingress from Fargate containers
      GroupId: !Ref hatchetbrokerTargetSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref ApiPort
      ToPort: !Ref ApiPort
      SourceSecurityGroupId: !Ref hatchetbrokerWorkloadSecurityGroup

  hatchetbrokerAmazonMQSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your Broker credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub AmazonMQ main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "amazonmquser"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16

  
  
  hatchetbrokerAmazonMQBroker:
    Metadata:
      'aws:copilot:description': 'A RabbitMQ broker to handle task queues'
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: "false"
      BrokerName: !Sub '${App}-${Env}-RMQBroker'
      DeploymentMode: SINGLE_INSTANCE
      EngineType: RabbitMQ
      EngineVersion: "3.11.28" # changed EngineVersion to latest
      HostInstanceType: !FindInMap
        - BrokerHostInstanceTypeMap
        - !Ref Env
        - HostInstanceType
      PubliclyAccessible: "false" # TODO: do we really want this flag?
      SecurityGroups:
        - !Ref hatchetbrokerTargetSecurityGroup
      SubnetIds:
        - !Select [0, !Split [',', !Ref PrivateSubnets]]
      Logs:
        General: "true"
      Users:
        - ConsoleAccess: "true"
          Username:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref hatchetbrokerAmazonMQSecret, ":SecretString:username}}" ]]
          Password:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref hatchetbrokerAmazonMQSecret, ":SecretString:password}}" ]]

  hatchetdbrokerConnectionStringSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your Broker connection string'
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub RabbitMQ connection string for ${AWS::StackName}
      SecretString: !Sub
        - 'amqps://{{resolve:secretsmanager:${hatchetbrokerAmazonMQSecret}:SecretString:username}}:{{resolve:secretsmanager:${hatchetbrokerAmazonMQSecret}:SecretString:password}}@${brokerId}.mq.${AWS::Region}.amazonaws.com:${Port}/'
        - brokerId: !Ref hatchetbrokerAmazonMQBroker

  
  # # Broker endpoint stored in SSM so that other services can retrieve the endpoint.
  # BrokerEndpointAddressParam:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub '/${App}/${Env}/broker'  # Other services can retrieve the endpoint from this path.
  #     Type: String
  #     Value: !Sub
  #       - amqps://${Username}:${Password}@${BrokerId}.mq.${AWS::Region}.amazonaws.com:${Port}/
  #       - Username: !Ref Username
  #         Password: !Ref Password
  #         BrokerId: !Ref basicBroker
  
  # # Broker endpoint stored in SSM so that other services can retrieve the endpoint.
  # FlowerBrokerEndpointAddress:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub '/${App}/${Env}/broker-amqp'  # Other services can retrieve the endpoint from this path.
  #     Type: String
  #     Value: !Sub
  #       - amqp://${Username}:${Password}@${BrokerId}.mq.${AWS::Region}.amazonaws.com:${Port}/?ssl=true
  #       - Username: !Ref Username
  #         Password: !Ref Password
  #         BrokerId: !Ref basicBroker
  
  # HTTPBrokerEndpointAddress:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub '/${App}/${Env}/broker-https'  # Other services can retrieve the endpoint from this path.
  #     Type: String
  #     Value: !Sub
  #       - https://${Username}:${Password}@${BrokerId}.mq.${AWS::Region}.amazonaws.com:${ApiPort}/api/vhost
  #       - Username: !Ref Username
  #         Password: !Ref Password
  #         BrokerId: !Ref basicBroker

Outputs:
  # brokerEndpoint:
  #   Description: "The AMQP endpoints of each broker instance as a list of strings"
  #   Value: !Join [ ",", !GetAtt basicBroker.AmqpEndpoints ]
  #   Export:
  #     Name: !Sub ${App}-${Env}-basicBrokerAmqpEndpoints
  # brokerId:
  #   Description: "The broker instance id"
  #   Value: !Ref basicBroker
  #   Export:
  #     Name: !Sub ${App}-${Env}-basicBrokerId
  hatchetbrokerConnectionStringSecret:
    Description: "The secret that holds the connection string to the RabbitMQ broker."
    Value: !Ref hatchetdbrokerConnectionStringSecret
    Export:
      Name: !Sub ${App}-${Env}-hatchetbrokerConnectionStringSecret

  hatchetbrokerSecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref hatchetbrokerWorkloadSecurityGroup  
    Export:
      Name: !Sub ${App}-${Env}-hatchetbrokerSecurityGroup